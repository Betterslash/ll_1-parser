N = { program, decllist, arithmetic, arithmetic1, arithmetic2, multiply1, multiply2, term, term', declaration, lidentifier, type1, type2, type3, arraydecl, cmpdstmt, stmtlist, stmt, simplstmt, assignstmt, expression, factor, iostmt, structstmt, ifstmt, whilestmt, condition, returnstmt, forstmt, relation }
E = { var, const, identifier, ϵ, id, ?, ;, :, {, }, [, ], ::, <-, +, -, ^, *, (, ), <, <=, >=, =, !=, >, for, while, mod, div, /, array, if, else, bool, typedef, ,, return, char, int, double, write, writeln, read, readln, nr }
S = program
P = {
	program -> var decllist ; cmpdstmt,
	cmpdstmt -> { stmtlist } | ϵ,
	decllist -> declaration ; decllist | cmpdstmt | ϵ,
	declaration -> id : type3 | arraydecl,
	type1 -> bool | char | int | double,
	type2 -> typedef :: identifier { decllist },
	type3 -> type1 | type2,
	arraydecl -> array [ nr ] :: type3,
	stmtlist -> stmt ; stmtlist | ϵ,
	stmt -> simplstmt | structstmt,
	simplstmt -> assignstmt | iostmt,
	assignstmt -> id <- expression ,
	expression -> arithmetic2 arithmetic1,
	arithmetic1 -> + arithmetic2 arithmetic1 | - arithmetic2 arithmetic1 | ϵ,
	arithmetic2 -> multiply2 multiply1,
	multiply1 -> * multiply2 multiply1 | / multiply2 multiply1 | ϵ,
	multiply2 -> ( expression ) | id | const,
	factor -> ( expression ) | identifier,
	iostmt -> read ( identifier ) | write ( identifier ) | readln ( identifier ) | writeln ( identifier ),
	structstmt -> { stmtlist } | ifstmt | whilestmt,
	ifstmt -> if ( condition ) cmpdstmt else cmpdstmt,
	whilestmt -> while ( condition ) cmpdstmt,
	condition -> + aritmethic | - aritmethic | / aritmethic | * aritmethic | div aritmethic | mod aritmethic | ^ aritmethic | ( expression ) term' relation expression | identifier term' relation expression,
	arithmetic -> expression term relation expression,
	returnstmt -> return expression ;,
	forstmt -> for ( assignstmt ; condition ; expression ) cmpdstmt,
	relation -> < | <= | = | != | >= | >,
	term' -> * factor term' | ^ factor term' | ϵ,
	term -> factor term'
}